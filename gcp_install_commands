# Install gcloud to your local machine
# windows, mac, linux <- instructions for each of these platforms
# easier: https://console.cloud.google.com

# Create GCP Account
# Google Container Engine -> Enable
# Google Compute Engine API -> Enable

export PROJECT_ID="$HOSTNAME-lambda-devops"

# Create project named PROJECT_ID

# Copy your id_rsa from local ~/.ssh to GCP ~/.ssh (unless you installed gcloud locally)

git clone git@github.com:LambdaSchool/DevOps-Deployment.git


cd DevOps-Deployment/backend

# Create Dockerfile
FROM node:5.4
COPY package.json package.json
WORKDIR /
RUN npm install
COPY server.js /
EXPOSE 8080
CMD ["node", "/server.js"]

docker build -t gcr.io/${PROJECT_ID}/lambda-devops:v1 .

# If your Dockerfile is perfect, this works.
# Otherwise it fails without saying anything at all.

docker run -d -p 8080:8080 gcr.io/${PROJECT_ID}/lambda-devops:v1

# Now you can test it
curl localhost:8080
# This should respond with "Hello World!"

gcloud docker -- push gcr.io/${PROJECT_ID}/lambda-devops:v1

gcloud container clusters create ${PROJECT_ID}-devops-cluster \
      --num-nodes=2 \
      --zone=us-central1-f \
      --machine-type n1-standard-1 \
      --project=${PROJECT_ID}

# Create the following yaml file lambda-devops-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ${PROJECT_ID} # you have to manually enter this
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ${PROJECT_ID}
    spec:
      containers:
      - name: master
        image: gcr.io/${PROJECT_ID}/${PROJECT_ID}:v1
        ports:
          - containerPort: 8080

kubectl create -f lambda-devops-deployment.yaml --record

# Get the name of the container you just created
kubectl get pods

# If you get an STATUS=InvalidImageName you must EDIT your deployment .yaml file with
kubectl edit deployments/lambda-devops

kubectl expose deployment lambda-devops --type=LoadBalancer --port=8080 --target-port=8080

# Get your IP!

kubectl get services

